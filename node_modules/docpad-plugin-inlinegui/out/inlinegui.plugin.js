// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var InlineguiPlugin;
    return InlineguiPlugin = (function(_super) {
      __extends(InlineguiPlugin, _super);

      function InlineguiPlugin() {
        return InlineguiPlugin.__super__.constructor.apply(this, arguments);
      }

      InlineguiPlugin.prototype.name = 'inlinegui';

      InlineguiPlugin.prototype.config = {
        url: 'http://webwrite.github.io/inlinegui/',
        script: '/inlinegui/script.js',
        stylesheet: '/inlinegui/style.css'
      };

      InlineguiPlugin.prototype.populateCollections = function(opts) {
        var config, docpad;
        docpad = this.docpad;
        config = this.getConfig();
        docpad.getBlock('scripts').add(config.script);
        docpad.getBlock('styles').add(config.stylesheet);
        return this;
      };

      InlineguiPlugin.prototype.extendTemplateData = function(opts) {
        var _base;
        return (_base = opts.templateData).editable != null ? _base.editable : _base.editable = function(_arg) {
          var attribute, element, item, url, value, _ref;
          item = _arg.item, attribute = _arg.attribute, value = _arg.value, element = _arg.element, url = _arg.url;
          if (item == null) {
            item = this.document;
          }
          item = (_ref = typeof item.toJSON === "function" ? item.toJSON() : void 0) != null ? _ref : item;
          if (value == null) {
            value = item[attribute];
          }
          if (url == null) {
            url = item.url;
          }
          if (element == null) {
            element = 'div';
          }
          return "<" + element + " class=\"inlinegui-editable\" about=\"" + url + "\" property=\"" + attribute + "\">" + value + "</" + element + ">";
        };
      };

      InlineguiPlugin.prototype.serverExtend = function(_arg) {
        var plugin, serverExpress;
        serverExpress = _arg.serverExpress;
        plugin = this;
        serverExpress.get('/inlinegui/script.js', function(req, res) {
          return res.redirect(302, plugin.getConfig().url + 'scripts/inline.js');
        });
        serverExpress.get('/inlinegui/style.css', function(req, res) {
          return res.redirect(302, plugin.getConfig().url + 'styles/inline.css');
        });
        serverExpress.get('/inlinegui/*', function(req, res) {
          return res.redirect(302, plugin.getConfig().url + req.params[0]);
        });
        return true;
      };

      return InlineguiPlugin;

    })(BasePlugin);
  };

}).call(this);
