// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(testers) {
    var MyTester, expect, pathUtil, rimraf, superAgent, _ref;
    pathUtil = require('path');
    expect = require('chai').expect;
    superAgent = require('superagent');
    superAgent['delete'] = superAgent.del;
    rimraf = require('rimraf');
    return MyTester = (function(_super) {
      __extends(MyTester, _super);

      function MyTester() {
        this.testCustom = __bind(this.testCustom, this);
        this.testCreate = __bind(this.testCreate, this);
        this.clean = __bind(this.clean, this);
        _ref = MyTester.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MyTester.prototype.clean = function() {
        var tester, testerConfig;
        tester = this;
        testerConfig = tester.getConfig();
        this.suite("clean restapi", function(suite, test) {
          return test('remove src', function(next) {
            return rimraf(pathUtil.join(testerConfig.testPath, 'src'), function(err) {
              return next();
            });
          });
        });
        return this;
      };

      MyTester.prototype.testCreate = function() {
        this.clean();
        return MyTester.__super__.testCreate.apply(this, arguments);
      };

      MyTester.prototype.testServer = function(next) {
        var tester;
        tester = this;
        MyTester.__super__.testServer.apply(this, arguments);
        return this.suite('restapi', function(suite, test) {
          var apiUrl, docpad, docpadConfig, files, plugin, pluginConfig, request, requestWithCheck, testerConfig;
          testerConfig = tester.getConfig();
          docpad = tester.docpad;
          docpadConfig = docpad.getConfig();
          plugin = tester.getPlugin();
          pluginConfig = plugin.getConfig();
          files = [];
          apiUrl = "http://localhost:" + docpadConfig.port + "/restapi";
          request = function(method, relativeUrl, requestData, next) {
            var absoluteUrl;
            absoluteUrl = apiUrl + '/' + relativeUrl;
            console.log("" + method + " to " + absoluteUrl);
            return superAgent[method](absoluteUrl).type('json').set('Accept', 'application/json').send(requestData).timeout(30 * 1000).end(next);
          };
          requestWithCheck = function(method, url, requestData, responseData, next) {
            return request(method, url, requestData, function(err, res) {
              var actual, expected, item, items, _i, _len;
              if (err) {
                return next(err);
              }
              actual = res.body;
              expected = {
                success: true,
                message: null,
                data: responseData
              };
              switch (method) {
                case 'delete':
                  expected.message = 'Delete completed successfully';
                  break;
                case 'post':
                  expected.message = 'Update completed successfully';
                  break;
                case 'put':
                  expected.message = 'Creation completed successfully';
                  break;
                case 'get':
                  actual.message = expected.message = 'Overwritten as this changes';
              }
              items = actual.data;
              if (Array.isArray(items) === false) {
                items = [items];
              }
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                delete item.source;
                delete item.date;
                delete item.id;
              }
              try {
                expect(actual, 'response result should be as expected').to.deep.equal(expected);
              } catch (_error) {
                err = _error;
                console.log(JSON.stringify(actual, null, '  '));
                console.log(JSON.stringify(expected, null, '  '));
                return next(err);
              }
              return next();
            });
          };
          suite('collections', function(suite, test) {
            return test('check listing', function(done) {
              var requestData, responseData;
              responseData = [];
              docpad.eachCollection(function(collection, collectionName) {
                return responseData.push({
                  name: collectionName,
                  length: 0,
                  relativePaths: []
                });
              });
              requestData = {};
              return requestWithCheck('get', 'collections/', requestData, responseData, done);
            });
          });
          suite('create', function(suite, test) {
            test("create a new document", function(done) {
              var requestData, responseData;
              responseData = {
                meta: {
                  title: 'hello world'
                },
                filename: 'test.txt',
                relativePath: 'posts/test.txt',
                url: '/posts/test.txt',
                urls: ['/posts/test.txt'],
                contentType: "text/plain",
                encoding: "utf8",
                content: 'hello *world*',
                contentRendered: 'hello *world*'
              };
              requestData = {
                title: responseData.meta.title,
                content: responseData.content
              };
              files.push(responseData);
              return requestWithCheck('put', "collection/documents/posts/test.txt", requestData, responseData, done);
            });
            test("create a 2nd new document", function(done) {
              var requestData, responseData;
              responseData = {
                meta: {
                  title: 'hello world'
                },
                filename: 'test-2.html',
                relativePath: 'posts/test-2.html',
                url: '/posts/test-2.html',
                urls: ['/posts/test-2.html'],
                contentType: "text/html",
                encoding: "utf8",
                content: 'hello *world*',
                contentRendered: 'hello *world*'
              };
              requestData = {
                title: responseData.meta.title,
                content: responseData.content
              };
              files.push(responseData);
              return requestWithCheck('put', "collection/documents/posts/test.html", requestData, responseData, done);
            });
            test("create a 3rd new document", function(done) {
              var requestData, responseData;
              responseData = {
                meta: {
                  title: 'hello world'
                },
                filename: 'test-3.html.md',
                relativePath: 'posts/test-3.html.md',
                url: '/posts/test-3.html',
                urls: ['/posts/test-3.html'],
                contentType: "text/x-markdown",
                encoding: "utf8",
                content: 'hello *world*',
                contentRendered: "<p>hello <em>world</em></p>\n"
              };
              requestData = {
                title: responseData.meta.title,
                content: responseData.content
              };
              files.push(responseData);
              return requestWithCheck('put', "collection/documents/posts/test.html.md", requestData, responseData, done);
            });
            return test('check listing', function(done) {
              var requestData, responseData;
              responseData = files;
              requestData = {};
              return requestWithCheck('get', 'collection/documents/', requestData, responseData, done);
            });
          });
          suite('delete', function(suite, test) {
            test('delete last document', function(done) {
              var requestData, responseData;
              responseData = [files.pop()];
              requestData = {};
              return requestWithCheck('delete', 'collection/documents/posts/test-3.html.md', requestData, responseData, done);
            });
            return test('check listing', function(done) {
              var requestData, responseData;
              responseData = files;
              requestData = {};
              return requestWithCheck('get', 'collection/documents/', requestData, responseData, done);
            });
          });
          return suite('update', function(suite, test) {
            test('update last document', function(done) {
              var file, requestData, responseData;
              file = files[files.length - 1];
              file.meta.title = 'hello WORLD';
              responseData = file;
              requestData = file.meta;
              return requestWithCheck('post', 'collection/documents/posts/test-2.html', requestData, responseData, done);
            });
            return test('check listing', function(done) {
              var requestData, responseData;
              responseData = files;
              requestData = {};
              return requestWithCheck('get', 'collection/documents/', requestData, responseData, done);
            });
          });
        });
      };

      MyTester.prototype.testCustom = function() {
        return this.clean();
      };

      return MyTester;

    })(testers.ServerTester);
  };

}).call(this);
